<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyBlog.Core.Web</name>
    </assembly>
    <members>
        <member name="T:MyBlog.Core.Web.AOP.LuoKiPetCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:MyBlog.Core.Web.AOP.LuoKiPetLogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.AOP.LuoKiPetLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:MyBlog.Core.Web.AOP.LuoKiPetRedisCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.OverWrite.JwtHelper.IssueJwt(MyBlog.Core.Web.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlog.Core.Web.AuthHelper.OverWrite.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:MyBlog.Core.Web.AuthHelper.JwtTokenAuth">
            <summary>
            中间件
            原做为自定义授权中间件
            先做检查 header token的使用
            </summary>
        </member>
        <member name="F:MyBlog.Core.Web.AuthHelper.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:MyBlog.Core.Web.AuthHelper.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],MyBlog.Core.Web.AuthHelper.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:MyBlog.Core.Web.AuthHelper.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="T:MyBlog.Core.Web.AuthHelper.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:MyBlog.Core.Web.AuthHelper.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.AuthHelper.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.AuthHelper.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{MyBlog.Core.Web.AuthHelper.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.MarkdownUploadImages(Microsoft.AspNetCore.Http.IFormCollection)">
            <summary>
            markdown编辑器写博客时上传图像api
            </summary>
            <param name="Files"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.GetBlogArticleByTechnical(System.Int32)">
            <summary>
            根据技术文章类型获取该技术文集的博客文章
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.UpdateBlogArticle(MyBlog.Core.Model.MyBlogModels.BlogArticle)">
            <summary>
            更新博客文章
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.CreateNewBlogArticle(System.Int32,System.Int32)">
            <summary>
            新建博客文章
            </summary>
            <param name="id">创建文章的用户ID</param>
            <param name="type">文章的文集类型索引</param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.SaveBlogArticleHistoryVersion(MyBlog.Core.Model.MyBlogModels.BlogArticle)">
            <summary>
            保存一博客文章一个新的版本号
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.GetBlogHistoryVersion(System.Int32)">
            <summary>
            获取博客文章的版本历史
            </summary>
            <param name="blogid"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.ChangeArticleStatus(System.Int32,System.Int32)">
            <summary>
            修改文章的发布状态
            </summary>
            <param name="blogid"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.GetAllBlogArticleList">
            <summary>
            获取博客文章的所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.BlogArticleController.GetBlogDetails(System.Int32)">
            <summary>
            获取博客文章的详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.FileHandleController.RequestUploadFile(MyBlog.Core.Common.Models.FileHandleModel.RequestFileUploadEntity)">
            <summary>
            请求上传文件
            </summary>
            <param name="requestFile">请求上传参数实体</param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.FileHandleController.FileSave">
            <summary>
            文件上传
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.FileHandleController.FileMerge(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            文件合并
            </summary>
            <param name="fileInfo">文件参数信息[name]</param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.FileHandleController.RequestDownloadFile(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            请求下载文件
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.FileHandleController.FileDownload(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            分片下载文件
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.FileHandleController.GetCryptoString(System.IO.Stream)">
            <summary>
            文件流加密
            </summary>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.ImageHandleController.ImagePost(Microsoft.AspNetCore.Http.IFormCollection)">
            <summary>
            图像上传
            </summary>
            <param name="Files"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:MyBlog.Core.Web.Controllers.TechnicalController.GetTechniclaAllData">
            <summary>
            获取所有的技术类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBlog.Core.Web.Middlewares.RequRespLogMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:MyBlog.Core.Web.Middlewares.RequRespLogMildd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.Middlewares.RequRespLogMildd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="T:MyBlog.Core.Web.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:MyBlog.Core.Web.SwaggerHelper.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:MyBlog.Core.Web.SwaggerHelper.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="T:MyBlog.Core.Web.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:MyBlog.Core.Web.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:MyBlog.Core.Web.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:MyBlog.Core.Web.SwaggerHelper.CustomRouteAttribute.#ctor(MyBlog.Core.Web.SwaggerHelper.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
    </members>
</doc>
